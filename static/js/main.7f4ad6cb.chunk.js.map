{"version":3,"sources":["store/selectors/characters-selectors.ts","Components/Header.tsx","helpers/const.ts","axios/api.ts","store/reducers/characters-reducer.ts","Components/CircularPreloader.tsx","Components/Item.tsx","Components/List.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["getIsLoading","state","characters","isLoading","getCharactersSelector","getCurrentPage","currentPage","getTotalPagesCount","totalPagesCount","HeaderDiv","styled","div","Logo","h1","Header","useSelector","instance","axios","create","baseURL","charactersAPI","get","response","data","initialState","itemsInPage","countOfLoadedImages","charactersAC","charactersData","type","charactersReducer","action","results","info","pages","CircularPreloader","props","size","styleType","classes","classesAbsolute","useStylesAbsolute","classesStaticCenter","useStylesStaticCenter","classesStaticTop","useStylesStaticTop","useCircularPreloader","className","circularWrapper","CircularProgress","color","makeStyles","position","top","bottom","left","right","display","justifyContent","alignItems","zIndex","ItemDiv","ImageWrapper","PreloaderWrapper","Image","img","P","p","Item","character","useState","localIsLoading","setLocalIsLoading","dispatch","useDispatch","onLoadHandler","useItem","src","image","onLoad","name","Div","useList","useEffect","a","length","console","log","getCharacters","charactersElements","map","el","id","onScrollHandlerThrottle","throttle","ref","current","scrollTop","scrollHeight","clientHeight","useRef","List","onScroll","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f4ad6cb.chunk.js","sourcesContent":["import {StateType} from \"../store\";\r\n\r\nexport const getIsLoading = (state: StateType) => state.characters.isLoading;\r\nexport const getCharactersSelector = (state: StateType) => state.characters.characters;\r\nexport const getCurrentPage = (state: StateType) => state.characters.currentPage;\r\nexport const getTotalPagesCount = (state: StateType) => state.characters.totalPagesCount;\r\n","import styled from \"styled-components\";\r\nimport {headerHeight} from \"../helpers/const\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentPage, getTotalPagesCount} from \"../store/selectors/characters-selectors\";\r\n\r\nconst HeaderDiv = styled.div`\r\n    flex-basis: ${headerHeight}px;\r\n    flex-shrink: 0;\r\n    background-color: #444;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    color: white;\r\n`;\r\nconst Logo = styled.h1`\r\n  color: white;\r\n  margin-right: 20px;\r\n`;\r\n\r\n//============== CUSTOM HOOK ================\r\nconst useHeader = () => {\r\n    const totalPagesCount = useSelector(getTotalPagesCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    return {\r\n        totalPagesCount, currentPage\r\n    }\r\n};\r\n\r\n//============== COMPONENT ==================\r\nconst Header: React.FC<{}> = () => {\r\n    const {\r\n        totalPagesCount, currentPage\r\n    } = useHeader();\r\n\r\n    return (\r\n        <HeaderDiv>\r\n            <Logo>\r\n                Load-on-scroll\r\n            </Logo>\r\n            <div>\r\n                <div>Total Pages Count: {totalPagesCount}</div>\r\n                <div>Current Page: {currentPage}</div>\r\n            </div>\r\n\r\n        </HeaderDiv>\r\n    )\r\n};\r\nexport default Header;","export const  headerHeight = 50;","import axios from \"axios\";\r\nimport {CharactersDataType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api/'\r\n});\r\n\r\nexport const charactersAPI = {\r\n    async getCharacters(currentPage = 1) {\r\n        let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {GetActionsType, StateType} from \"../store\";\r\nimport {charactersAPI} from \"../../axios/api\";\r\nimport {CharactersDataType, CharacterType} from \"../../types/types\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    characters: [] as Array<CharacterType>, // массив данных characters\r\n    totalPagesCount: 0, // общее число страниц\r\n    currentPage: 1, // текущая страница\r\n    itemsInPage: 0, // число элементов на странице (<=20)\r\n    countOfLoadedImages: 0, // число загруженных изображений из одной страницы 0...itemsInPage\r\n\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: [...state.characters, ...action.charactersData.results],\r\n                totalPagesCount: action.charactersData.info.pages,\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/ADD_COUNT_OF_LOADED_IMAGES': {\r\n            const itemsInPage = state.itemsInPage;\r\n            return {\r\n                ...state,\r\n                countOfLoadedImages: state.countOfLoadedImages === itemsInPage - 1 ? 0 : state.countOfLoadedImages + 1,\r\n                isLoading: state.countOfLoadedImages === itemsInPage - 1 ? false : state.isLoading\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_ITEMS_IN_PAGE': {\r\n            return {...state, itemsInPage: action.itemsInPage}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    addCountOfLoadedImages: () => ({type: 'CHARACTERS/ADD_COUNT_OF_LOADED_IMAGES'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'CHARACTERS/TOGGLE_LOADING', isLoading} as const),\r\n    setItemsInPage: (itemsInPage: number) => ({type: 'CHARACTERS/SET_ITEMS_IN_PAGE', itemsInPage} as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(charactersAC.toggleLoading(true));\r\n        let data = await charactersAPI.getCharacters(currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n        dispatch(charactersAC.setItemsInPage(data.results.length));\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n        //dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default charactersReducer;","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n//======================== CUSTOM HOOK =========================\r\nconst useCircularPreloader = ({styleType}: UseCircularPreloaderPropsType) => {\r\n    const classesAbsolute = useStylesAbsolute();\r\n    const classesStaticCenter = useStylesStaticCenter();\r\n    const classesStaticTop = useStylesStaticTop();\r\n    let classes = classesStaticCenter;\r\n    if (styleType === 'absolute') {\r\n        classes = classesAbsolute;\r\n    }\r\n    if (styleType === 'static-top') {\r\n        classes = classesStaticTop;\r\n    }\r\n    return {classes}\r\n};\r\n\r\n//======================= COMPONENT ===============================\r\nconst CircularPreloader: React.FC<PropsType> = (props) => {\r\n    const {size = 100, styleType = 'static-center'} = props;\r\n    const {classes} = useCircularPreloader({styleType});\r\n\r\n    return (\r\n        <div className={classes.circularWrapper}>\r\n            <CircularProgress size={size} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CircularPreloader;\r\n\r\n//============================ TYPES ==================================================\r\ntype PropsType = {\r\n    size?: number | undefined\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\ntype UseCircularPreloaderPropsType = {\r\n    styleType?: 'absolute' | 'static-center' | 'static-top'\r\n}\r\n\r\n//============================ STYLES =======================================================\r\nconst useStylesAbsolute = makeStyles({\r\n    circularWrapper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        right: 0,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 1001\r\n    }\r\n});\r\nconst useStylesStaticCenter = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\nconst useStylesStaticTop = makeStyles({\r\n    circularWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start'\r\n    }\r\n});\r\n","import {CharacterType} from \"../types/types\";\r\nimport styled from \"styled-components\";\r\nimport React, {useState} from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {charactersAC} from \"../store/reducers/characters-reducer\";\r\n\r\n//=============== STYLED ==================\r\nconst ItemDiv = styled.div`\r\n    height: 50px;\r\n    padding: 0 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    &:nth-child(2n+1) {\r\n    background-color: #eee;\r\n    }\r\n`;\r\nconst ImageWrapper = styled.div`\r\n  position: relative;\r\n  width: 45px;\r\n  height: 45px;\r\n`;\r\n\r\nconst PreloaderWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n`\r\n\r\n\r\nconst Image = styled.img`\r\n    height: 45px;\r\n    border-radius: 5px;    \r\n`;\r\nconst P = styled.p`\r\n  color: darkblue;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n`;\r\n\r\n//=============== CUSTOM HOOK ==============\r\nconst useItem = () => {\r\n    const [localIsLoading, setLocalIsLoading] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const onLoadHandler = () => {\r\n       dispatch(charactersAC.addCountOfLoadedImages());\r\n       setLocalIsLoading(false)\r\n    };\r\n    return {\r\n        onLoadHandler,\r\n        localIsLoading\r\n    }\r\n};\r\n\r\n\r\n//============== COMPONENT =====================\r\nconst Item: React.FC<PropsType> = ({character}) => {\r\n    const {\r\n        onLoadHandler,\r\n        localIsLoading\r\n    } = useItem();\r\n    return (\r\n        <ItemDiv>\r\n            <ImageWrapper>\r\n                <Image src={character.image}\r\n                       onLoad={onLoadHandler}\r\n                />\r\n                {\r\n                    localIsLoading &&\r\n                    <PreloaderWrapper>\r\n                        <CircularProgress size={45}\r\n                                          color={'secondary'}\r\n                        />\r\n                    </PreloaderWrapper>\r\n\r\n                }\r\n\r\n            </ImageWrapper>\r\n\r\n\r\n            <P>{character.name}</P>\r\n\r\n        </ItemDiv>\r\n    )\r\n};\r\nexport default Item;\r\n\r\n//============== TYPE ================\r\ntype PropsType = {\r\n    character: CharacterType\r\n}","import styled from \"styled-components\";\r\nimport {headerHeight} from \"../helpers/const\";\r\nimport React, {useEffect, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCharactersSelector,\r\n    getCurrentPage,\r\n    getIsLoading,\r\n    getTotalPagesCount\r\n} from \"../store/selectors/characters-selectors\";\r\nimport {charactersAC, getCharacters} from \"../store/reducers/characters-reducer\";\r\nimport CircularPreloader from \"./CircularPreloader\";\r\nimport Item from \"./Item\";\r\nimport throttle from \"lodash/throttle\";\r\n\r\n\r\n//=============== STYLED =================\r\nconst Div = styled.div`\r\n    height: calc(100vh - ${headerHeight}px);    \r\n    flex-grow: 1;\r\n    overflow: auto;    \r\n`;\r\n\r\n//=============== CUSTOM HOOK ==============\r\nconst useList = () => {\r\n    const dispatch = useDispatch();\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const characters = useSelector(getCharactersSelector);\r\n    const totalPagesCount = useSelector(getTotalPagesCount);\r\n    const isLoading = useSelector(getIsLoading);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCharacters(currentPage))\r\n    }, [currentPage, dispatch]);\r\n\r\n    const charactersElements = characters.map(\r\n        el => <Item key={el.id} character={el}/>\r\n    );\r\n\r\n    const onScrollHandler = () => {\r\n        if (ref && ref.current) {\r\n            const scrollTop = ref.current.scrollTop;\r\n            const scrollHeight = ref.current.scrollHeight;\r\n            const clientHeight = ref.current.clientHeight;\r\n            const delta = scrollHeight - scrollTop - clientHeight;\r\n            const isEnd = delta <= 50;\r\n\r\n            if (isEnd && !isLoading && currentPage < totalPagesCount) {\r\n                dispatch(charactersAC.setCurrentPage(currentPage + 1))\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    const onScrollHandlerThrottle = throttle(onScrollHandler, 1000);\r\n\r\n    const ref = useRef<HTMLDivElement>(null);\r\n\r\n    return {\r\n        charactersElements, onScrollHandlerThrottle, ref, isLoading\r\n    }\r\n\r\n};\r\n\r\n//=============== COMPONENT ================\r\nconst List: React.FC<{}> = () => {\r\n    const {\r\n        charactersElements, onScrollHandlerThrottle, ref, isLoading\r\n    } = useList();\r\n    //usePreloader();\r\n\r\n\r\n    return (\r\n        <Div onScroll={onScrollHandlerThrottle}\r\n             ref={ref}\r\n        >\r\n            {charactersElements}\r\n            {isLoading && <CircularPreloader styleType='absolute'/>}\r\n        </Div>\r\n    )\r\n}\r\nexport default List","import React from 'react';\nimport styled from \"styled-components\";\nimport Header from \"./Components/Header\";\nimport List from \"./Components/List\";\n\nconst Div = styled.div`\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n`;\n\n\nfunction App() {\n  return (\n    <Div>\n      <Header/>\n      <List/>\n    </Div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport charactersReducer from \"./reducers/characters-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    characters: charactersReducer,\r\n});\r\n\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store;\r\n\r\n//================ TYPE =======================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}